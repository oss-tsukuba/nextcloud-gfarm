#! /bin/bash

set -eu -o pipefail

mode="$1"
gfarm_path="$2"
mountpoint="$3"
auth_type="$4"
gfarm_conf="$5"
x509proxy="$6"
jwt_user_path="$7"
trace_id="$8"

source /nc-gfarm/config.sh
source ${CONFIG_LIB}

lockfile="${mountpoint}.lock"

[ -z "${gfarm_conf}" ] && exit 1

# use anytime (preferred over ~/.gfarm2rc
GFARM_CONFIG_FILE="${gfarm_conf}"
export GFARM_CONFIG_FILE

if [ -n "${x509proxy}" ]; then
    X509_USER_PROXY="${x509proxy}"
    export X509_USER_PROXY
fi

if [ -n "${jwt_user_path}" ]; then
    JWT_USER_PATH="${jwt_user_path}"
    export JWT_USER_PATH
fi

LOG_DEBUG()
{
    #echo >&2 DEBUG "[${trace_id}] $@"
    DEBUG "[${trace_id}] $@"
}

LOG_ERR()
{
    # stdout for Exception
    echo "$@"
    #echo >&2 ERR "[${trace_id}] $@"
    ERR "[${trace_id}] $@"
}

LOG_DEBUG "$@"

check_auth()
{
    # SEE ALSO: app-gfarm/html/custom_apps/files_external_gfarm/lib/Storage/Gfarm.php
    case "$auth_type" in
        sharedsecret)
            LOG_DEBUG "gfkey -e"
            # swap stdout and stderr
            # return stderr
            gfkey -e 3>&2 2>&1 1>&3
            return $?
            ;;
        gsi|myproxy)
            LOG_DEBUG "grid-proxy-info"
            # swap stdout and stderr
            # return stderr
            grid-proxy-info -exists 3>&2 2>&1 1>&3
            return $?
            ;;
        jwt-agent)
            LOG_DEBUG "jwt-agent --status"
            jwt-agent --status
            return $?
            ;;
        *)
            LOG_ERR "unknown auth_type: $auth_type"
            return 1
            ;;
    esac
    return 1
}

check_mount_quick()
{
    # check quickly
    for mp in $(mount -t fuse.gfarm2fs | cut -d " " -f 3- | awk -F" type fuse" '{print $1}'); do
        if [ "$mountpoint" = "$mp" ]; then
            LOG_DEBUG "already mounted: $mountpoint"
            return 0
        fi
    done
    return 1
}

remount=0
case "$mode" in
    MOUNT)
        ;;
    REMOUNT)
        remount=1
        ;;
    CHECK_MOUNT)
        check_auth || exit $?
        check_mount_quick
        exit $?
        ;;
    CHECK_AUTH)
        check_auth
        exit $?
        ;;
    *)
        LOG_ERR "unknown mode: $mode"
        exit 1
        ;;
esac

if [ $remount -eq 0 ]; then
    # shortcut
    if check_mount_quick; then
        exit 0
    fi
fi

lock_expired()
{
    min=1
    num=$(find "$lockfile" -maxdepth 0 -type d -mmin +${min} > /dev/null 2>&1 | wc -l)
    if [ -e "$lockfile" -a  $num -eq 1 ]; then
        return 0  # expired
    fi
    return 1
}

lock_and_wait()
{
    while ! mkdir "$lockfile" > /dev/null 2>&1; do
        if lock_expired; then
            break
        fi
        LOG_DEBUG "wait for other mount"
        sleep 1
    done
    return 0
}

unlock()
{
    rmdir "$lockfile" || :
}

check_mount()
{
    # check carefully
    dfout=$(df "$mountpoint" | tail -1)
    fstype=$(echo "$dfout" | awk '{print $1}')
    mp=$(echo "$dfout" | xargs | cut -d ' ' -f 6-)
    if [ "$fstype" = "gfarm2fs" ]; then
        if [ "$mountpoint" = "$mp" ]; then
            LOG_DEBUG "already mounted: $mountpoint"
            return 0
        else
            LOG_ERR "unexpected mountpoint: mountpoint=${mountpoint} != $mp"
            exit 1  # EXIT
        fi
    fi
    # not mounted
    return 1
}

trap unlock EXIT

lock_and_wait

if [ $remount -eq 1 ]; then
    if umount_gfarm2fs "${mountpoint}" 2> /dev/null; then
        LOG_DEBUG "umount when remount=1"
    fi
fi

# recheck in lock
if check_mount; then
    exit 0
fi

# check UDP connection for gfsd
num=$(gfhost $(gfhost -M | head -10 | awk '{ print $3 }') | wc -l)
if [ $num -le 0 ]; then
    LOG_ERR "No available gfsd (UDP connection may not be available)"
    exit 1
fi

mount_gfarm2fs "${mountpoint}" "${gfarm_path}" 3>&2 2>&1 1>&3
retval=$?
if [ $retval -ne 0 ]; then
    LOG_ERR "gfarm2fs mount failed: mountpoint=${mountpoint}"
fi
exit $retval
